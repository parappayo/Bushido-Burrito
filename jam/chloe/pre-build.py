import os
autogen = "// This file is automatically generated by a pre-build step\n"

# DROPBOX
dropbox_folder = None
for dirname, dirnames, filenames in os.walk(os.path.expanduser('~')):
    for subdirname in dirnames:
        if(subdirname == 'Dropbox'):
            dropbox_folder = os.path.join(dirname, subdirname)
            break
    if dropbox_folder:
        break
if dropbox_folder != None:
    dropbox_folder = dropbox_folder.replace("\\", "/")
    project_folder = os.path.split(os.getcwd())[1]
    xcopy = 'xcopy "' + dropbox_folder + '/' + project_folder + '/assets" assets /E /D /Y'
    os.system(xcopy)
else:
    print("Error: Couldn't find the Dropbox folder!")

# ATLASES
print("Atlases")
atlases_dir = "assets/Atlases"
atlases_ext = ".xml"
atlases_files = []
for path, dirs, files in os.walk(atlases_dir):
    for file in files:
        file_parts = os.path.splitext(file)
        if (file_parts[1] == atlases_ext):
            atlases_files.append(file_parts[0])
atlases = autogen;       
atlases += "package resources\n"
atlases += "{\n"
atlases += "\t" + "import starling.textures.Texture;\n"
atlases += "\t" + "import starling.textures.TextureAtlas;\n"
atlases += "\n"
atlases += "\t" + "public class Atlases\n"
atlases += "\t" + "{\n"
atlases_id_img = "PNG"
atlases_id_xml = "XML"
for file in atlases_files:
    atlases += "\t\t" + '[Embed(source="../../' + atlases_dir + '/' + file + '.png")]\n'
    atlases += "\t\t" + "private static var " + file + atlases_id_img + ":Class;\n"
    atlases += "\t\t" + "public static var " + file + "Textures" + ":TextureAtlas;\n"
    atlases += "\t\t" + '[Embed(source="../../' + atlases_dir + '/' + file + atlases_ext + '", mimeType="application/octet-stream")]\n'
    atlases += "\t\t" + "private static var " + file + atlases_id_xml + ":Class;\n"
    atlases += "\n"
atlases += "\t\t" + "public static function init():void\n"
atlases += "\t\t" + "{\n"
for file in atlases_files:
    atlases += "\t\t\t" + file + "Textures = new TextureAtlas(Texture.fromBitmap(new " + file + atlases_id_img + "), XML(new " + file + atlases_id_xml + "()));\n"
atlases += "\t\t" + "}\n"
atlases += "\t" + "}\n"
atlases += "}"
atlases_out = open("src/resources/Atlases.as", "w")
atlases_out.write(atlases)
atlases_out.close()        

# AUDIO
print("Audio")
audio_dir = "assets/Audio"
audio_ext = ".mp3"
audio_files = []
for path, dirs, files in os.walk(audio_dir):
    for file in files:
        file_parts = os.path.splitext(file)
        audio_files.append(file_parts[0])
audio = autogen;       
audio += "package resources\n"
audio += "{\n"
audio += "\t" + "import flash.media.Sound;\n"
audio += "\t" + "import flash.media.SoundTransform;\n"
audio += "\n"
audio += "\t" + "public class Audio\n"
audio += "\t" + "{\n"
audio_id_mp3 = "MP3"
for file in audio_files:
    audio += "\t\t" + '[Embed(source="../../' + audio_dir + '/' + file + audio_ext + '")]\n'
    audio += "\t\t" + "private static var " + file + audio_id_mp3 + ":Class;\n"
    audio += "\t\t" + "public static var " + file + ":Sound;\n"
    audio += "\n"
audio += "\t\t" + "public static function init():void\n"
audio += "\t\t{\n"
for file in audio_files:
    audio += "\t\t\t" + file + " = create(" + file + audio_id_mp3 + ");\n"
audio += "\t\t}\n"
audio += "\n"
audio += "\t\t" + "private static function create(soundClass:Class):Sound\n"
audio += "\t\t" + "{\n"
audio += "\t\t\t" + "var sound:Sound = new soundClass();\n"
audio += "\t\t\t" + "sound.play(0, 0, new SoundTransform(0));\n"
audio += "\t\t\t" + "return sound;\n"
audio += "\t\t" + "}\n"
audio += "\t" + "}\n"
audio += "}"
audio_out = open("src/resources/Audio.as", "w")
audio_out.write(audio)
audio_out.close()

# FONTS
print("Fonts")
fonts_dir = "assets/Fonts"
fonts_ext = ".fnt"
fonts_files = []
for path, dirs, files in os.walk(fonts_dir):
    for file in files:
        file_parts = os.path.splitext(file)
        if (file_parts[1] == fonts_ext):
            fonts_files.append(file_parts[0])
fonts = autogen;       
fonts += "package resources\n"
fonts += "{\n"
fonts += "\t" + "import starling.text.BitmapFont;\n"
fonts += "\t" + "import starling.text.TextField;\n"
fonts += "\t" + "import starling.textures.Texture;\n"
fonts += "\n"
fonts += "\t" + "public class Fonts\n"
fonts += "\t" + "{\n"
fonts_id_img = "PNG"
fonts_id_xml = "FNT"
for file in fonts_files:
    fonts += "\t\t" + '[Embed(source="../../' + fonts_dir + '/' + file + '.png")]\n'
    fonts += "\t\t" + "private static var " + file + fonts_id_img + ":Class;\n"
    fonts += "\t\t" + '[Embed(source="../../' + fonts_dir + '/' + file + fonts_ext + '", mimeType="application/octet-stream")]\n'
    fonts += "\t\t" + "private static var " + file + fonts_id_xml + ":Class;\n"
    fonts += "\n"
fonts += "\t\t" + "public static function init():void\n"
fonts += "\t\t{\n"
for file in fonts_files:
    fonts += "\t\t\t" + 'TextField.registerBitmapFont(new BitmapFont(Texture.fromBitmap(new ' + file + fonts_id_img + '()), XML(new ' + file + fonts_id_xml + '())), "' + file + '");\n'
fonts += "\t\t}\n"
fonts += "\t" + "}\n"
fonts += "}"
fonts_out = open("src/resources/Fonts.as", "w")
fonts_out.write(fonts)
fonts_out.close()

# LEVELS
print("Levels")
levels_dir = "assets/Ogmo/levels"
levels_ext = ".oel"
levels_files = []
for path, dirs, files in os.walk(levels_dir):
    for file in files:
        file_parts = os.path.splitext(file)
        levels_files.append(file_parts[0])
levels = autogen;       
levels += "package resources\n"
levels += "{\n"
levels += "\t" + "public class Levels\n"
levels += "\t" + "{\n"
for file in levels_files:
    levels += "\t\t" + '[Embed(source="../../' + levels_dir + '/' + file + levels_ext + '", mimeType="application/octet-stream")]\n'
    levels += "\t\t" + "public static var " + file + "XML:Class;\n"
    levels += "\n"
levels += "\t\t" + "public static function init():void\n"
levels += "\t\t{\n"
levels += "\t\t}\n"
levels += "\t" + "}\n"
levels += "}"
levels_out = open("src/resources/Levels.as", "w")
levels_out.write(levels)
levels_out.close()

# PARTICLES
print("Particles")
particles_dir = "assets/Particles"
particles_ext = ".pex"
particles_files = []
for path, dirs, files in os.walk(particles_dir):
    for file in files:
        file_parts = os.path.splitext(file)
        if (file_parts[1] == particles_ext):
            particles_files.append(file_parts[0])
particles = autogen;       
particles += "package resources\n"
particles += "{\n"
particles += "\t" + "public class Particles\n"
particles += "\t" + "{\n"
for file in particles_files:
    particles += "\t\t" + '[Embed(source="../../' + particles_dir + '/' + file + particles_ext + '", mimeType="application/octet-stream")]\n'
    particles += "\t\t" + "public static var " + file + "XML:Class;\n"
    particles += "\n"
particles += "\t\t" + "public static function init():void\n"
particles += "\t\t{\n"
particles += "\t\t}\n"
particles += "\t" + "}\n"
particles += "}"
particles_out = open("src/resources/Particles.as", "w")
particles_out.write(particles)
particles_out.close()

# SCREENS
print("Screens")
screens_dir = "assets/Textures/Screens"
screens_ext = ".png"
screens_files = []
for path, dirs, files in os.walk(screens_dir):
    for file in files:
        file_parts = os.path.splitext(file)
        if (file_parts[1] == screens_ext):
            screens_files.append(file_parts[0])
screens = autogen;       
screens += "package resources\n"
screens += "{\n"
screens += "\t" + "import starling.textures.Texture;\n"
screens += "\n"
screens += "\t" + "public class Screens\n"
screens += "\t" + "{\n"
screens_id_img = "PNG"
for file in screens_files:
    screens += "\t\t" + '[Embed(source="../../' + screens_dir + '/' + file + '.png")]\n'
    screens += "\t\t" + "private static var " + file + screens_id_img + ":Class;\n"
    screens += "\t\t" + "public static var " + file + "Texture" + ":Texture;\n"
    screens += "\n"
screens += "\t\t" + "public static function init():void\n"
screens += "\t\t" + "{\n"
for file in screens_files:
    screens += "\t\t\t" + file + "Texture = Texture.fromBitmap(new " + file + screens_id_img + "());\n"
screens += "\t\t" + "}\n"
screens += "\t" + "}\n"
screens += "}"
screens_out = open("src/resources/Screens.as", "w")
screens_out.write(screens)
screens_out.close()

# RESOURCE MANAGER
resources = autogen;
resources += "package\n"
resources += "{\n"
resources += "\t" + "import resources.*;\n"
resources += "\n"
resources += "\t" + "public class ResourceManager\n"
resources += "\t" + "{\n"
resources += "\t\t" + "public static function init():void\n"
resources += "\t\t{\n"
resources += "\t\t\t" + "Atlases.init();\n"
resources += "\t\t\t" + "Audio.init();\n"
resources += "\t\t\t" + "Fonts.init();\n"
resources += "\t\t\t" + "Levels.init();\n"
resources += "\t\t\t" + "Particles.init();\n"
resources += "\t\t\t" + "Screens.init();\n"
resources += "\t\t}\n"
resources += "\t" + "}\n"
resources += "}"
resources_out = open("src/ResourceManager.as", "w")
resources_out.write(resources)
resources_out.close()
